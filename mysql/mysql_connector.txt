{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mysql.connector as mydb\n",
    "import sys\n",
    "from importlib import import_module, reload\n",
    "\n",
    "\n",
    "class MysqlConnector:\n",
    "    def __init__(self, host='db', port='3306', user='root', password='root', database='globis-dev'):\n",
    "        self.cnx = None\n",
    "        try:\n",
    "            self.cnx = mydb.connect(\n",
    "                host=host,\n",
    "                port=port,\n",
    "                user=user,\n",
    "                password=password,\n",
    "                database=database\n",
    "            )\n",
    "\n",
    "            self.cnx.ping(reconnect=True)\n",
    "            self.cnx.autocommit = False\n",
    "\n",
    "            self.cursor = self.cnx.cursor(dictionary=True)\n",
    "            print(self.cnx.is_connected())\n",
    "            print('Connected with DB.')\n",
    "\n",
    "        except (mydb.errors.ProgrammingError) as e:\n",
    "            print(e)\n",
    "            print(\"Failed to connect with DB.\")\n",
    "            sys.exit(1)\n",
    "        # finally:\n",
    "        #    if cnx is not None and cnx.is_connected():\n",
    "        #        cnx.close()\n",
    "\n",
    "\n",
    "    def fetch(self, sql):\n",
    "        try:\n",
    "            self.cursor.execute(sql)\n",
    "            print('Data fetching...')\n",
    "\n",
    "            header = [row[0] for row in self.cursor.description]\n",
    "            rows: List[Dict[str, Any]] = self.cursor.fetchall()\n",
    "\n",
    "            return header , rows\n",
    "        except mydb.Error as e:\n",
    "            print('Data fetching error')\n",
    "            print(e)\n",
    "            sys.exit(1)\n",
    "\n",
    "\n",
    "    def _close_connection(self) -> None:\n",
    "        self.cursor.close\n",
    "        self.cnx.close\n",
    "        self.cursor = None\n",
    "        self.cnx = None\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
